{"remainingRequest":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\xmlbuilder\\lib\\XMLStreamWriter.js","dependencies":[{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\xmlbuilder\\lib\\XMLStreamWriter.js","mtime":1527750088307},{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527750036045},{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527750016829}],"contextDependencies":[],"result":["// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStreamWriter, XMLText, XMLWriterBase,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  XMLDeclaration = require('./XMLDeclaration');\r\n\r\n  XMLDocType = require('./XMLDocType');\r\n\r\n  XMLCData = require('./XMLCData');\r\n\r\n  XMLComment = require('./XMLComment');\r\n\r\n  XMLElement = require('./XMLElement');\r\n\r\n  XMLRaw = require('./XMLRaw');\r\n\r\n  XMLText = require('./XMLText');\r\n\r\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\r\n\r\n  XMLDTDAttList = require('./XMLDTDAttList');\r\n\r\n  XMLDTDElement = require('./XMLDTDElement');\r\n\r\n  XMLDTDEntity = require('./XMLDTDEntity');\r\n\r\n  XMLDTDNotation = require('./XMLDTDNotation');\r\n\r\n  XMLWriterBase = require('./XMLWriterBase');\r\n\r\n  module.exports = XMLStreamWriter = (function(superClass) {\r\n    extend(XMLStreamWriter, superClass);\r\n\r\n    function XMLStreamWriter(stream, options) {\r\n      XMLStreamWriter.__super__.constructor.call(this, options);\r\n      this.stream = stream;\r\n    }\r\n\r\n    XMLStreamWriter.prototype.document = function(doc) {\r\n      var child, i, j, len, len1, ref, ref1, results;\r\n      ref = doc.children;\r\n      for (i = 0, len = ref.length; i < len; i++) {\r\n        child = ref[i];\r\n        child.isLastRootNode = false;\r\n      }\r\n      doc.children[doc.children.length - 1].isLastRootNode = true;\r\n      ref1 = doc.children;\r\n      results = [];\r\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\r\n        child = ref1[j];\r\n        switch (false) {\r\n          case !(child instanceof XMLDeclaration):\r\n            results.push(this.declaration(child));\r\n            break;\r\n          case !(child instanceof XMLDocType):\r\n            results.push(this.docType(child));\r\n            break;\r\n          case !(child instanceof XMLComment):\r\n            results.push(this.comment(child));\r\n            break;\r\n          case !(child instanceof XMLProcessingInstruction):\r\n            results.push(this.processingInstruction(child));\r\n            break;\r\n          default:\r\n            results.push(this.element(child));\r\n        }\r\n      }\r\n      return results;\r\n    };\r\n\r\n    XMLStreamWriter.prototype.attribute = function(att) {\r\n      return this.stream.write(' ' + att.name + '=\"' + att.value + '\"');\r\n    };\r\n\r\n    XMLStreamWriter.prototype.cdata = function(node, level) {\r\n      return this.stream.write(this.space(level) + '<![CDATA[' + node.text + ']]>' + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.comment = function(node, level) {\r\n      return this.stream.write(this.space(level) + '<!-- ' + node.text + ' -->' + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.declaration = function(node, level) {\r\n      this.stream.write(this.space(level));\r\n      this.stream.write('<?xml version=\"' + node.version + '\"');\r\n      if (node.encoding != null) {\r\n        this.stream.write(' encoding=\"' + node.encoding + '\"');\r\n      }\r\n      if (node.standalone != null) {\r\n        this.stream.write(' standalone=\"' + node.standalone + '\"');\r\n      }\r\n      this.stream.write(this.spacebeforeslash + '?>');\r\n      return this.stream.write(this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.docType = function(node, level) {\r\n      var child, i, len, ref;\r\n      level || (level = 0);\r\n      this.stream.write(this.space(level));\r\n      this.stream.write('<!DOCTYPE ' + node.root().name);\r\n      if (node.pubID && node.sysID) {\r\n        this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\r\n      } else if (node.sysID) {\r\n        this.stream.write(' SYSTEM \"' + node.sysID + '\"');\r\n      }\r\n      if (node.children.length > 0) {\r\n        this.stream.write(' [');\r\n        this.stream.write(this.endline(node));\r\n        ref = node.children;\r\n        for (i = 0, len = ref.length; i < len; i++) {\r\n          child = ref[i];\r\n          switch (false) {\r\n            case !(child instanceof XMLDTDAttList):\r\n              this.dtdAttList(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLDTDElement):\r\n              this.dtdElement(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLDTDEntity):\r\n              this.dtdEntity(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLDTDNotation):\r\n              this.dtdNotation(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLCData):\r\n              this.cdata(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLComment):\r\n              this.comment(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLProcessingInstruction):\r\n              this.processingInstruction(child, level + 1);\r\n              break;\r\n            default:\r\n              throw new Error(\"Unknown DTD node type: \" + child.constructor.name);\r\n          }\r\n        }\r\n        this.stream.write(']');\r\n      }\r\n      this.stream.write(this.spacebeforeslash + '>');\r\n      return this.stream.write(this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.element = function(node, level) {\r\n      var att, child, i, len, name, ref, ref1, space;\r\n      level || (level = 0);\r\n      space = this.space(level);\r\n      this.stream.write(space + '<' + node.name);\r\n      ref = node.attributes;\r\n      for (name in ref) {\r\n        if (!hasProp.call(ref, name)) continue;\r\n        att = ref[name];\r\n        this.attribute(att);\r\n      }\r\n      if (node.children.length === 0 || node.children.every(function(e) {\r\n        return e.value === '';\r\n      })) {\r\n        if (this.allowEmpty) {\r\n          this.stream.write('></' + node.name + '>');\r\n        } else {\r\n          this.stream.write(this.spacebeforeslash + '/>');\r\n        }\r\n      } else if (this.pretty && node.children.length === 1 && (node.children[0].value != null)) {\r\n        this.stream.write('>');\r\n        this.stream.write(node.children[0].value);\r\n        this.stream.write('</' + node.name + '>');\r\n      } else {\r\n        this.stream.write('>' + this.newline);\r\n        ref1 = node.children;\r\n        for (i = 0, len = ref1.length; i < len; i++) {\r\n          child = ref1[i];\r\n          switch (false) {\r\n            case !(child instanceof XMLCData):\r\n              this.cdata(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLComment):\r\n              this.comment(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLElement):\r\n              this.element(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLRaw):\r\n              this.raw(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLText):\r\n              this.text(child, level + 1);\r\n              break;\r\n            case !(child instanceof XMLProcessingInstruction):\r\n              this.processingInstruction(child, level + 1);\r\n              break;\r\n            default:\r\n              throw new Error(\"Unknown XML node type: \" + child.constructor.name);\r\n          }\r\n        }\r\n        this.stream.write(space + '</' + node.name + '>');\r\n      }\r\n      return this.stream.write(this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.processingInstruction = function(node, level) {\r\n      this.stream.write(this.space(level) + '<?' + node.target);\r\n      if (node.value) {\r\n        this.stream.write(' ' + node.value);\r\n      }\r\n      return this.stream.write(this.spacebeforeslash + '?>' + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.raw = function(node, level) {\r\n      return this.stream.write(this.space(level) + node.value + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.text = function(node, level) {\r\n      return this.stream.write(this.space(level) + node.value + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.dtdAttList = function(node, level) {\r\n      this.stream.write(this.space(level) + '<!ATTLIST ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType);\r\n      if (node.defaultValueType !== '#DEFAULT') {\r\n        this.stream.write(' ' + node.defaultValueType);\r\n      }\r\n      if (node.defaultValue) {\r\n        this.stream.write(' \"' + node.defaultValue + '\"');\r\n      }\r\n      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.dtdElement = function(node, level) {\r\n      this.stream.write(this.space(level) + '<!ELEMENT ' + node.name + ' ' + node.value);\r\n      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.dtdEntity = function(node, level) {\r\n      this.stream.write(this.space(level) + '<!ENTITY');\r\n      if (node.pe) {\r\n        this.stream.write(' %');\r\n      }\r\n      this.stream.write(' ' + node.name);\r\n      if (node.value) {\r\n        this.stream.write(' \"' + node.value + '\"');\r\n      } else {\r\n        if (node.pubID && node.sysID) {\r\n          this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\r\n        } else if (node.sysID) {\r\n          this.stream.write(' SYSTEM \"' + node.sysID + '\"');\r\n        }\r\n        if (node.nData) {\r\n          this.stream.write(' NDATA ' + node.nData);\r\n        }\r\n      }\r\n      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.dtdNotation = function(node, level) {\r\n      this.stream.write(this.space(level) + '<!NOTATION ' + node.name);\r\n      if (node.pubID && node.sysID) {\r\n        this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\r\n      } else if (node.pubID) {\r\n        this.stream.write(' PUBLIC \"' + node.pubID + '\"');\r\n      } else if (node.sysID) {\r\n        this.stream.write(' SYSTEM \"' + node.sysID + '\"');\r\n      }\r\n      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.endline = function(node) {\r\n      if (!node.isLastRootNode) {\r\n        return this.newline;\r\n      } else {\r\n        return '';\r\n      }\r\n    };\r\n\r\n    return XMLStreamWriter;\r\n\r\n  })(XMLWriterBase);\r\n\r\n}).call(this);\r\n",null]}