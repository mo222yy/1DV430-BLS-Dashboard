{"remainingRequest":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\xmlbuilder\\lib\\Utility.js","dependencies":[{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\xmlbuilder\\lib\\Utility.js","mtime":1527750088266},{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527750036045},{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527750016829}],"contextDependencies":[],"result":["// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var assign, isArray, isEmpty, isFunction, isObject, isPlainObject,\r\n    slice = [].slice,\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  assign = function() {\r\n    var i, key, len, source, sources, target;\r\n    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\r\n    if (isFunction(Object.assign)) {\r\n      Object.assign.apply(null, arguments);\r\n    } else {\r\n      for (i = 0, len = sources.length; i < len; i++) {\r\n        source = sources[i];\r\n        if (source != null) {\r\n          for (key in source) {\r\n            if (!hasProp.call(source, key)) continue;\r\n            target[key] = source[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n\r\n  isFunction = function(val) {\r\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\r\n  };\r\n\r\n  isObject = function(val) {\r\n    var ref;\r\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\r\n  };\r\n\r\n  isArray = function(val) {\r\n    if (isFunction(Array.isArray)) {\r\n      return Array.isArray(val);\r\n    } else {\r\n      return Object.prototype.toString.call(val) === '[object Array]';\r\n    }\r\n  };\r\n\r\n  isEmpty = function(val) {\r\n    var key;\r\n    if (isArray(val)) {\r\n      return !val.length;\r\n    } else {\r\n      for (key in val) {\r\n        if (!hasProp.call(val, key)) continue;\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n  };\r\n\r\n  isPlainObject = function(val) {\r\n    var ctor, proto;\r\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));\r\n  };\r\n\r\n  module.exports.assign = assign;\r\n\r\n  module.exports.isFunction = isFunction;\r\n\r\n  module.exports.isObject = isObject;\r\n\r\n  module.exports.isArray = isArray;\r\n\r\n  module.exports.isEmpty = isEmpty;\r\n\r\n  module.exports.isPlainObject = isPlainObject;\r\n\r\n}).call(this);\r\n",null]}