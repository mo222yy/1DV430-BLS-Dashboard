{"remainingRequest":"/home/marre/Skrivbord/Projekt/dashboard/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/marre/Skrivbord/Projekt/dashboard/dashboard/node_modules/@angular/common/esm5/testing.js","dependencies":[{"path":"/home/marre/Skrivbord/Projekt/dashboard/dashboard/node_modules/@angular/common/esm5/testing.js","mtime":1527857406911},{"path":"/home/marre/Skrivbord/Projekt/dashboard/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1527857407875},{"path":"/home/marre/Skrivbord/Projekt/dashboard/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1527857406787}],"contextDependencies":[],"result":["/**\n * @license Angular v5.2.9\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n/** PURE_IMPORTS_START _angular_core,tslib,_angular_common PURE_IMPORTS_END */\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { __extends } from 'tslib';\nimport { LocationStrategy } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A spy for {\\@link Location} that allows tests to fire simulated location events.\n *\n * \\@experimental\n */\nvar SpyLocation = /*@__PURE__*/ (function () {\n    function SpyLocation() {\n        this.urlChanges = [];\n        this._history = [new LocationState('', '')];\n        this._historyIndex = 0;\n        /**\n         * \\@internal\n         */\n        this._subject = new EventEmitter();\n        /**\n         * \\@internal\n         */\n        this._baseHref = '';\n        /**\n         * \\@internal\n         */\n        this._platformStrategy = /** @type {?} */ ((null));\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    SpyLocation.prototype.setInitialPath = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) { this._history[this._historyIndex].path = url; };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    SpyLocation.prototype.setBaseHref = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) { this._baseHref = url; };\n    /**\n     * @return {?}\n     */\n    SpyLocation.prototype.path = /**\n     * @return {?}\n     */\n        function () { return this._history[this._historyIndex].path; };\n    /**\n     * @param {?} path\n     * @param {?=} query\n     * @return {?}\n     */\n    SpyLocation.prototype.isCurrentPathEqualTo = /**\n     * @param {?} path\n     * @param {?=} query\n     * @return {?}\n     */\n        function (path, query) {\n            if (query === void 0) {\n                query = '';\n            }\n            var /** @type {?} */ givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n            var /** @type {?} */ currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n            return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\n        };\n    /**\n     * @param {?} pathname\n     * @return {?}\n     */\n    SpyLocation.prototype.simulateUrlPop = /**\n     * @param {?} pathname\n     * @return {?}\n     */\n        function (pathname) {\n            this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n        };\n    /**\n     * @param {?} pathname\n     * @return {?}\n     */\n    SpyLocation.prototype.simulateHashChange = /**\n     * @param {?} pathname\n     * @return {?}\n     */\n        function (pathname) {\n            // Because we don't prevent the native event, the browser will independently update the path\n            this.setInitialPath(pathname);\n            this.urlChanges.push('hash: ' + pathname);\n            this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });\n        };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    SpyLocation.prototype.prepareExternalUrl = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            if (url.length > 0 && !url.startsWith('/')) {\n                url = '/' + url;\n            }\n            return this._baseHref + url;\n        };\n    /**\n     * @param {?} path\n     * @param {?=} query\n     * @return {?}\n     */\n    SpyLocation.prototype.go = /**\n     * @param {?} path\n     * @param {?=} query\n     * @return {?}\n     */\n        function (path, query) {\n            if (query === void 0) {\n                query = '';\n            }\n            path = this.prepareExternalUrl(path);\n            if (this._historyIndex > 0) {\n                this._history.splice(this._historyIndex + 1);\n            }\n            this._history.push(new LocationState(path, query));\n            this._historyIndex = this._history.length - 1;\n            var /** @type {?} */ locationState = this._history[this._historyIndex - 1];\n            if (locationState.path == path && locationState.query == query) {\n                return;\n            }\n            var /** @type {?} */ url = path + (query.length > 0 ? ('?' + query) : '');\n            this.urlChanges.push(url);\n            this._subject.emit({ 'url': url, 'pop': false });\n        };\n    /**\n     * @param {?} path\n     * @param {?=} query\n     * @return {?}\n     */\n    SpyLocation.prototype.replaceState = /**\n     * @param {?} path\n     * @param {?=} query\n     * @return {?}\n     */\n        function (path, query) {\n            if (query === void 0) {\n                query = '';\n            }\n            path = this.prepareExternalUrl(path);\n            var /** @type {?} */ history = this._history[this._historyIndex];\n            if (history.path == path && history.query == query) {\n                return;\n            }\n            history.path = path;\n            history.query = query;\n            var /** @type {?} */ url = path + (query.length > 0 ? ('?' + query) : '');\n            this.urlChanges.push('replace: ' + url);\n        };\n    /**\n     * @return {?}\n     */\n    SpyLocation.prototype.forward = /**\n     * @return {?}\n     */\n        function () {\n            if (this._historyIndex < (this._history.length - 1)) {\n                this._historyIndex++;\n                this._subject.emit({ 'url': this.path(), 'pop': true });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    SpyLocation.prototype.back = /**\n     * @return {?}\n     */\n        function () {\n            if (this._historyIndex > 0) {\n                this._historyIndex--;\n                this._subject.emit({ 'url': this.path(), 'pop': true });\n            }\n        };\n    /**\n     * @param {?} onNext\n     * @param {?=} onThrow\n     * @param {?=} onReturn\n     * @return {?}\n     */\n    SpyLocation.prototype.subscribe = /**\n     * @param {?} onNext\n     * @param {?=} onThrow\n     * @param {?=} onReturn\n     * @return {?}\n     */\n        function (onNext, onThrow, onReturn) {\n            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n        };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    SpyLocation.prototype.normalize = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) { return /** @type {?} */ ((null)); };\n    return SpyLocation;\n}());\nvar LocationState = /*@__PURE__*/ (function () {\n    function LocationState(path, query) {\n        this.path = path;\n        this.query = query;\n    }\n    return LocationState;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock implementation of {\\@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * \\@stable\n */\nvar MockLocationStrategy = /*@__PURE__*/ (function (_super) {\n    __extends(MockLocationStrategy, _super);\n    function MockLocationStrategy() {\n        var _this = _super.call(this) || this;\n        _this.internalBaseHref = '/';\n        _this.internalPath = '/';\n        _this.internalTitle = '';\n        _this.urlChanges = [];\n        /**\n         * \\@internal\n         */\n        _this._subject = new EventEmitter();\n        return _this;\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.simulatePopState = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            this.internalPath = url;\n            this._subject.emit(new _MockPopStateEvent(this.path()));\n        };\n    /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.path = /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n        function (includeHash) {\n            if (includeHash === void 0) {\n                includeHash = false;\n            }\n            return this.internalPath;\n        };\n    /**\n     * @param {?} internal\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.prepareExternalUrl = /**\n     * @param {?} internal\n     * @return {?}\n     */\n        function (internal) {\n            if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n                return this.internalBaseHref + internal.substring(1);\n            }\n            return this.internalBaseHref + internal;\n        };\n    /**\n     * @param {?} ctx\n     * @param {?} title\n     * @param {?} path\n     * @param {?} query\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.pushState = /**\n     * @param {?} ctx\n     * @param {?} title\n     * @param {?} path\n     * @param {?} query\n     * @return {?}\n     */\n        function (ctx, title, path, query) {\n            this.internalTitle = title;\n            var /** @type {?} */ url = path + (query.length > 0 ? ('?' + query) : '');\n            this.internalPath = url;\n            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url);\n            this.urlChanges.push(externalUrl);\n        };\n    /**\n     * @param {?} ctx\n     * @param {?} title\n     * @param {?} path\n     * @param {?} query\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.replaceState = /**\n     * @param {?} ctx\n     * @param {?} title\n     * @param {?} path\n     * @param {?} query\n     * @return {?}\n     */\n        function (ctx, title, path, query) {\n            this.internalTitle = title;\n            var /** @type {?} */ url = path + (query.length > 0 ? ('?' + query) : '');\n            this.internalPath = url;\n            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url);\n            this.urlChanges.push('replace: ' + externalUrl);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.onPopState = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) { this._subject.subscribe({ next: fn }); };\n    /**\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.getBaseHref = /**\n     * @return {?}\n     */\n        function () { return this.internalBaseHref; };\n    /**\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.back = /**\n     * @return {?}\n     */\n        function () {\n            if (this.urlChanges.length > 0) {\n                this.urlChanges.pop();\n                var /** @type {?} */ nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n                this.simulatePopState(nextUrl);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MockLocationStrategy.prototype.forward = /**\n     * @return {?}\n     */\n        function () { throw 'not implemented'; };\n    return MockLocationStrategy;\n}(LocationStrategy));\nvar _MockPopStateEvent = /*@__PURE__*/ (function () {\n    function _MockPopStateEvent(newUrl) {\n        this.newUrl = newUrl;\n        this.pop = true;\n        this.type = 'popstate';\n    }\n    return _MockPopStateEvent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { SpyLocation, MockLocationStrategy };\n//# sourceMappingURL=testing.js.map\n",null]}