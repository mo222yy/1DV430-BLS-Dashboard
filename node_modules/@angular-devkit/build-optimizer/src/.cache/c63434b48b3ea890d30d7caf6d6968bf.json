{"remainingRequest":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\xmlbuilder\\lib\\XMLStringWriter.js","dependencies":[{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\xmlbuilder\\lib\\XMLStringWriter.js","mtime":1527750088309},{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527750036045},{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527750016829}],"contextDependencies":[],"result":["// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLText, XMLWriterBase,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  XMLDeclaration = require('./XMLDeclaration');\r\n\r\n  XMLDocType = require('./XMLDocType');\r\n\r\n  XMLCData = require('./XMLCData');\r\n\r\n  XMLComment = require('./XMLComment');\r\n\r\n  XMLElement = require('./XMLElement');\r\n\r\n  XMLRaw = require('./XMLRaw');\r\n\r\n  XMLText = require('./XMLText');\r\n\r\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\r\n\r\n  XMLDTDAttList = require('./XMLDTDAttList');\r\n\r\n  XMLDTDElement = require('./XMLDTDElement');\r\n\r\n  XMLDTDEntity = require('./XMLDTDEntity');\r\n\r\n  XMLDTDNotation = require('./XMLDTDNotation');\r\n\r\n  XMLWriterBase = require('./XMLWriterBase');\r\n\r\n  module.exports = XMLStringWriter = (function(superClass) {\r\n    extend(XMLStringWriter, superClass);\r\n\r\n    function XMLStringWriter(options) {\r\n      XMLStringWriter.__super__.constructor.call(this, options);\r\n    }\r\n\r\n    XMLStringWriter.prototype.document = function(doc) {\r\n      var child, i, len, r, ref;\r\n      this.textispresent = false;\r\n      r = '';\r\n      ref = doc.children;\r\n      for (i = 0, len = ref.length; i < len; i++) {\r\n        child = ref[i];\r\n        r += (function() {\r\n          switch (false) {\r\n            case !(child instanceof XMLDeclaration):\r\n              return this.declaration(child);\r\n            case !(child instanceof XMLDocType):\r\n              return this.docType(child);\r\n            case !(child instanceof XMLComment):\r\n              return this.comment(child);\r\n            case !(child instanceof XMLProcessingInstruction):\r\n              return this.processingInstruction(child);\r\n            default:\r\n              return this.element(child, 0);\r\n          }\r\n        }).call(this);\r\n      }\r\n      if (this.pretty && r.slice(-this.newline.length) === this.newline) {\r\n        r = r.slice(0, -this.newline.length);\r\n      }\r\n      return r;\r\n    };\r\n\r\n    XMLStringWriter.prototype.attribute = function(att) {\r\n      return ' ' + att.name + '=\"' + att.value + '\"';\r\n    };\r\n\r\n    XMLStringWriter.prototype.cdata = function(node, level) {\r\n      return this.space(level) + '<![CDATA[' + node.text + ']]>' + this.newline;\r\n    };\r\n\r\n    XMLStringWriter.prototype.comment = function(node, level) {\r\n      return this.space(level) + '<!-- ' + node.text + ' -->' + this.newline;\r\n    };\r\n\r\n    XMLStringWriter.prototype.declaration = function(node, level) {\r\n      var r;\r\n      r = this.space(level);\r\n      r += '<?xml version=\"' + node.version + '\"';\r\n      if (node.encoding != null) {\r\n        r += ' encoding=\"' + node.encoding + '\"';\r\n      }\r\n      if (node.standalone != null) {\r\n        r += ' standalone=\"' + node.standalone + '\"';\r\n      }\r\n      r += this.spacebeforeslash + '?>';\r\n      r += this.newline;\r\n      return r;\r\n    };\r\n\r\n    XMLStringWriter.prototype.docType = function(node, level) {\r\n      var child, i, len, r, ref;\r\n      level || (level = 0);\r\n      r = this.space(level);\r\n      r += '<!DOCTYPE ' + node.root().name;\r\n      if (node.pubID && node.sysID) {\r\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\r\n      } else if (node.sysID) {\r\n        r += ' SYSTEM \"' + node.sysID + '\"';\r\n      }\r\n      if (node.children.length > 0) {\r\n        r += ' [';\r\n        r += this.newline;\r\n        ref = node.children;\r\n        for (i = 0, len = ref.length; i < len; i++) {\r\n          child = ref[i];\r\n          r += (function() {\r\n            switch (false) {\r\n              case !(child instanceof XMLDTDAttList):\r\n                return this.dtdAttList(child, level + 1);\r\n              case !(child instanceof XMLDTDElement):\r\n                return this.dtdElement(child, level + 1);\r\n              case !(child instanceof XMLDTDEntity):\r\n                return this.dtdEntity(child, level + 1);\r\n              case !(child instanceof XMLDTDNotation):\r\n                return this.dtdNotation(child, level + 1);\r\n              case !(child instanceof XMLCData):\r\n                return this.cdata(child, level + 1);\r\n              case !(child instanceof XMLComment):\r\n                return this.comment(child, level + 1);\r\n              case !(child instanceof XMLProcessingInstruction):\r\n                return this.processingInstruction(child, level + 1);\r\n              default:\r\n                throw new Error(\"Unknown DTD node type: \" + child.constructor.name);\r\n            }\r\n          }).call(this);\r\n        }\r\n        r += ']';\r\n      }\r\n      r += this.spacebeforeslash + '>';\r\n      r += this.newline;\r\n      return r;\r\n    };\r\n\r\n    XMLStringWriter.prototype.element = function(node, level) {\r\n      var att, child, i, j, len, len1, name, r, ref, ref1, ref2, space, textispresentwasset;\r\n      level || (level = 0);\r\n      textispresentwasset = false;\r\n      if (this.textispresent) {\r\n        this.newline = '';\r\n        this.pretty = false;\r\n      } else {\r\n        this.newline = this.newlinedefault;\r\n        this.pretty = this.prettydefault;\r\n      }\r\n      space = this.space(level);\r\n      r = '';\r\n      r += space + '<' + node.name;\r\n      ref = node.attributes;\r\n      for (name in ref) {\r\n        if (!hasProp.call(ref, name)) continue;\r\n        att = ref[name];\r\n        r += this.attribute(att);\r\n      }\r\n      if (node.children.length === 0 || node.children.every(function(e) {\r\n        return e.value === '';\r\n      })) {\r\n        if (this.allowEmpty) {\r\n          r += '></' + node.name + '>' + this.newline;\r\n        } else {\r\n          r += this.spacebeforeslash + '/>' + this.newline;\r\n        }\r\n      } else if (this.pretty && node.children.length === 1 && (node.children[0].value != null)) {\r\n        r += '>';\r\n        r += node.children[0].value;\r\n        r += '</' + node.name + '>' + this.newline;\r\n      } else {\r\n        if (this.dontprettytextnodes) {\r\n          ref1 = node.children;\r\n          for (i = 0, len = ref1.length; i < len; i++) {\r\n            child = ref1[i];\r\n            if (child.value != null) {\r\n              this.textispresent++;\r\n              textispresentwasset = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (this.textispresent) {\r\n          this.newline = '';\r\n          this.pretty = false;\r\n          space = this.space(level);\r\n        }\r\n        r += '>' + this.newline;\r\n        ref2 = node.children;\r\n        for (j = 0, len1 = ref2.length; j < len1; j++) {\r\n          child = ref2[j];\r\n          r += (function() {\r\n            switch (false) {\r\n              case !(child instanceof XMLCData):\r\n                return this.cdata(child, level + 1);\r\n              case !(child instanceof XMLComment):\r\n                return this.comment(child, level + 1);\r\n              case !(child instanceof XMLElement):\r\n                return this.element(child, level + 1);\r\n              case !(child instanceof XMLRaw):\r\n                return this.raw(child, level + 1);\r\n              case !(child instanceof XMLText):\r\n                return this.text(child, level + 1);\r\n              case !(child instanceof XMLProcessingInstruction):\r\n                return this.processingInstruction(child, level + 1);\r\n              default:\r\n                throw new Error(\"Unknown XML node type: \" + child.constructor.name);\r\n            }\r\n          }).call(this);\r\n        }\r\n        if (textispresentwasset) {\r\n          this.textispresent--;\r\n        }\r\n        if (!this.textispresent) {\r\n          this.newline = this.newlinedefault;\r\n          this.pretty = this.prettydefault;\r\n        }\r\n        r += space + '</' + node.name + '>' + this.newline;\r\n      }\r\n      return r;\r\n    };\r\n\r\n    XMLStringWriter.prototype.processingInstruction = function(node, level) {\r\n      var r;\r\n      r = this.space(level) + '<?' + node.target;\r\n      if (node.value) {\r\n        r += ' ' + node.value;\r\n      }\r\n      r += this.spacebeforeslash + '?>' + this.newline;\r\n      return r;\r\n    };\r\n\r\n    XMLStringWriter.prototype.raw = function(node, level) {\r\n      return this.space(level) + node.value + this.newline;\r\n    };\r\n\r\n    XMLStringWriter.prototype.text = function(node, level) {\r\n      return this.space(level) + node.value + this.newline;\r\n    };\r\n\r\n    XMLStringWriter.prototype.dtdAttList = function(node, level) {\r\n      var r;\r\n      r = this.space(level) + '<!ATTLIST ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\r\n      if (node.defaultValueType !== '#DEFAULT') {\r\n        r += ' ' + node.defaultValueType;\r\n      }\r\n      if (node.defaultValue) {\r\n        r += ' \"' + node.defaultValue + '\"';\r\n      }\r\n      r += this.spacebeforeslash + '>' + this.newline;\r\n      return r;\r\n    };\r\n\r\n    XMLStringWriter.prototype.dtdElement = function(node, level) {\r\n      return this.space(level) + '<!ELEMENT ' + node.name + ' ' + node.value + this.spacebeforeslash + '>' + this.newline;\r\n    };\r\n\r\n    XMLStringWriter.prototype.dtdEntity = function(node, level) {\r\n      var r;\r\n      r = this.space(level) + '<!ENTITY';\r\n      if (node.pe) {\r\n        r += ' %';\r\n      }\r\n      r += ' ' + node.name;\r\n      if (node.value) {\r\n        r += ' \"' + node.value + '\"';\r\n      } else {\r\n        if (node.pubID && node.sysID) {\r\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\r\n        } else if (node.sysID) {\r\n          r += ' SYSTEM \"' + node.sysID + '\"';\r\n        }\r\n        if (node.nData) {\r\n          r += ' NDATA ' + node.nData;\r\n        }\r\n      }\r\n      r += this.spacebeforeslash + '>' + this.newline;\r\n      return r;\r\n    };\r\n\r\n    XMLStringWriter.prototype.dtdNotation = function(node, level) {\r\n      var r;\r\n      r = this.space(level) + '<!NOTATION ' + node.name;\r\n      if (node.pubID && node.sysID) {\r\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\r\n      } else if (node.pubID) {\r\n        r += ' PUBLIC \"' + node.pubID + '\"';\r\n      } else if (node.sysID) {\r\n        r += ' SYSTEM \"' + node.sysID + '\"';\r\n      }\r\n      r += this.spacebeforeslash + '>' + this.newline;\r\n      return r;\r\n    };\r\n\r\n    XMLStringWriter.prototype.openNode = function(node, level) {\r\n      var att, name, r, ref;\r\n      level || (level = 0);\r\n      if (node instanceof XMLElement) {\r\n        r = this.space(level) + '<' + node.name;\r\n        ref = node.attributes;\r\n        for (name in ref) {\r\n          if (!hasProp.call(ref, name)) continue;\r\n          att = ref[name];\r\n          r += this.attribute(att);\r\n        }\r\n        r += (node.children ? '>' : '/>') + this.newline;\r\n        return r;\r\n      } else {\r\n        r = this.space(level) + '<!DOCTYPE ' + node.rootNodeName;\r\n        if (node.pubID && node.sysID) {\r\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\r\n        } else if (node.sysID) {\r\n          r += ' SYSTEM \"' + node.sysID + '\"';\r\n        }\r\n        r += (node.children ? ' [' : '>') + this.newline;\r\n        return r;\r\n      }\r\n    };\r\n\r\n    XMLStringWriter.prototype.closeNode = function(node, level) {\r\n      level || (level = 0);\r\n      switch (false) {\r\n        case !(node instanceof XMLElement):\r\n          return this.space(level) + '</' + node.name + '>' + this.newline;\r\n        case !(node instanceof XMLDocType):\r\n          return this.space(level) + ']>' + this.newline;\r\n      }\r\n    };\r\n\r\n    return XMLStringWriter;\r\n\r\n  })(XMLWriterBase);\r\n\r\n}).call(this);\r\n",null]}