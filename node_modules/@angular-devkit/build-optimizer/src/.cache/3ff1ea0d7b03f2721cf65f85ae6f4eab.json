{"remainingRequest":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\xmlbuilder\\lib\\XMLStringifier.js","dependencies":[{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\xmlbuilder\\lib\\XMLStringifier.js","mtime":1527750088311},{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527750036045},{"path":"C:\\Martin\\DashBoard1.0\\mo222yy-project\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527750016829}],"contextDependencies":[],"result":["// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLStringifier,\r\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  module.exports = XMLStringifier = (function() {\r\n    function XMLStringifier(options) {\r\n      this.assertLegalChar = bind(this.assertLegalChar, this);\r\n      var key, ref, value;\r\n      options || (options = {});\r\n      this.noDoubleEncoding = options.noDoubleEncoding;\r\n      ref = options.stringify || {};\r\n      for (key in ref) {\r\n        if (!hasProp.call(ref, key)) continue;\r\n        value = ref[key];\r\n        this[key] = value;\r\n      }\r\n    }\r\n\r\n    XMLStringifier.prototype.eleName = function(val) {\r\n      val = '' + val || '';\r\n      return this.assertLegalChar(val);\r\n    };\r\n\r\n    XMLStringifier.prototype.eleText = function(val) {\r\n      val = '' + val || '';\r\n      return this.assertLegalChar(this.elEscape(val));\r\n    };\r\n\r\n    XMLStringifier.prototype.cdata = function(val) {\r\n      val = '' + val || '';\r\n      val = val.replace(']]>', ']]]]><![CDATA[>');\r\n      return this.assertLegalChar(val);\r\n    };\r\n\r\n    XMLStringifier.prototype.comment = function(val) {\r\n      val = '' + val || '';\r\n      if (val.match(/--/)) {\r\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\r\n      }\r\n      return this.assertLegalChar(val);\r\n    };\r\n\r\n    XMLStringifier.prototype.raw = function(val) {\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.attName = function(val) {\r\n      return val = '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.attValue = function(val) {\r\n      val = '' + val || '';\r\n      return this.attEscape(val);\r\n    };\r\n\r\n    XMLStringifier.prototype.insTarget = function(val) {\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.insValue = function(val) {\r\n      val = '' + val || '';\r\n      if (val.match(/\\?>/)) {\r\n        throw new Error(\"Invalid processing instruction value: \" + val);\r\n      }\r\n      return val;\r\n    };\r\n\r\n    XMLStringifier.prototype.xmlVersion = function(val) {\r\n      val = '' + val || '';\r\n      if (!val.match(/1\\.[0-9]+/)) {\r\n        throw new Error(\"Invalid version number: \" + val);\r\n      }\r\n      return val;\r\n    };\r\n\r\n    XMLStringifier.prototype.xmlEncoding = function(val) {\r\n      val = '' + val || '';\r\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\r\n        throw new Error(\"Invalid encoding: \" + val);\r\n      }\r\n      return val;\r\n    };\r\n\r\n    XMLStringifier.prototype.xmlStandalone = function(val) {\r\n      if (val) {\r\n        return \"yes\";\r\n      } else {\r\n        return \"no\";\r\n      }\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdPubID = function(val) {\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdSysID = function(val) {\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdElementValue = function(val) {\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdAttType = function(val) {\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\r\n      if (val != null) {\r\n        return '' + val || '';\r\n      } else {\r\n        return val;\r\n      }\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdNData = function(val) {\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.convertAttKey = '@';\r\n\r\n    XMLStringifier.prototype.convertPIKey = '?';\r\n\r\n    XMLStringifier.prototype.convertTextKey = '#text';\r\n\r\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\r\n\r\n    XMLStringifier.prototype.convertCommentKey = '#comment';\r\n\r\n    XMLStringifier.prototype.convertRawKey = '#raw';\r\n\r\n    XMLStringifier.prototype.assertLegalChar = function(str) {\r\n      var res;\r\n      res = str.match(/[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/);\r\n      if (res) {\r\n        throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\r\n      }\r\n      return str;\r\n    };\r\n\r\n    XMLStringifier.prototype.elEscape = function(str) {\r\n      var ampregex;\r\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\r\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\r\n    };\r\n\r\n    XMLStringifier.prototype.attEscape = function(str) {\r\n      var ampregex;\r\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\r\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\r\n    };\r\n\r\n    return XMLStringifier;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n",null]}