{"remainingRequest":"/home/marre/Dokument/1DV430/DashBoard1.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/marre/Dokument/1DV430/DashBoard1.0/node_modules/@angular/router/esm5/testing.js","dependencies":[{"path":"/home/marre/Dokument/1DV430/DashBoard1.0/node_modules/@angular/router/esm5/testing.js","mtime":1521065106000},{"path":"/home/marre/Dokument/1DV430/DashBoard1.0/node_modules/cache-loader/dist/cjs.js","mtime":1522145461920},{"path":"/home/marre/Dokument/1DV430/DashBoard1.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/**\n * @license Angular v5.2.9\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n/** PURE_IMPORTS_START _angular_common,_angular_common_testing,_angular_core,_angular_router PURE_IMPORTS_END */\nimport { Location, LocationStrategy } from '@angular/common';\nimport { MockLocationStrategy, SpyLocation } from '@angular/common/testing';\nimport { Compiler, Injectable, Injector, NgModule, NgModuleFactoryLoader, Optional } from '@angular/core';\nimport { ChildrenOutletContexts, NoPreloading, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTES, Router, RouterModule, UrlHandlingStrategy, UrlSerializer, provideRoutes, ɵROUTER_PROVIDERS, ɵflatten } from '@angular/router';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Allows to simulate the loading of ng modules in tests.\n *\n * \\@howToUse\n *\n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n *\n * \\@Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * \\@NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * \\@stable\n */\nvar SpyNgModuleFactoryLoader = /*@__PURE__*/ (function () {\n    function SpyNgModuleFactoryLoader(compiler) {\n        this.compiler = compiler;\n        /**\n         * \\@docsNotRequired\n         */\n        this._stubbedModules = {};\n    }\n    Object.defineProperty(SpyNgModuleFactoryLoader.prototype, \"stubbedModules\", {\n        /**\n         * @docsNotRequired\n         */\n        get: /**\n         * \\@docsNotRequired\n         * @return {?}\n         */ function () { return this._stubbedModules; },\n        /**\n         * @docsNotRequired\n         */\n        set: /**\n         * \\@docsNotRequired\n         * @param {?} modules\n         * @return {?}\n         */ function (modules) {\n            var /** @type {?} */ res = {};\n            for (var _i = 0, _a = Object.keys(modules); _i < _a.length; _i++) {\n                var t = _a[_i];\n                res[t] = this.compiler.compileModuleAsync(modules[t]);\n            }\n            this._stubbedModules = res;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SpyNgModuleFactoryLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n        function (path) {\n            if (this._stubbedModules[path]) {\n                return this._stubbedModules[path];\n            }\n            else {\n                return /** @type {?} */ (Promise.reject(new Error(\"Cannot find module \" + path)));\n            }\n        };\n    return SpyNgModuleFactoryLoader;\n}());\n/**\n * @param {?} opts\n * @return {?}\n */\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n * \\@stable\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} loader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} routes\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @return {?}\n */\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n    var /** @type {?} */ router = new Router(/** @type {?} */ ((null)), urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\n    // Handle deprecated argument ordering.\n    if (opts) {\n        if (isUrlHandlingStrategy(opts)) {\n            router.urlHandlingStrategy = opts;\n        }\n        else if (opts.paramsInheritanceStrategy) {\n            router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n        }\n    }\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    return router;\n}\n/**\n * \\@whatItDoes Sets up the router to be used for testing.\n *\n * \\@howToUse\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * \\@description\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of {\\@link Location}, {\\@link LocationStrategy}, and {\\@link\n * NgModuleFactoryLoader}.\n *\n * \\@stable\n */\nvar RouterTestingModule = /*@__PURE__*/ (function () {\n    function RouterTestingModule() {\n    }\n    /**\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    RouterTestingModule.withRoutes = /**\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n        function (routes, config) {\n            return {\n                ngModule: RouterTestingModule,\n                providers: [\n                    provideRoutes(routes),\n                    { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                ]\n            };\n        };\n    return RouterTestingModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router/testing package.\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { SpyNgModuleFactoryLoader, setupTestingRouter, RouterTestingModule };\n//# sourceMappingURL=testing.js.map\n",null]}